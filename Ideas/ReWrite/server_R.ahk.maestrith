;// Includes
    #Include lib\ws.ahk

;// Directives
    #singleinstance Force
    OnExit, ExitRoutine

;// Program start
    WS_LOGTOCONSOLE := 1
    initialize_WS()  ;
return

WS_OnAccept(socket){
    newSock := WS_Accept(socket, client_ip, client_port)
    newClient := new client(newSock)
    newClient.setNick("Guest" . A_TickCount)
}

initialize_WS(){
    WS_Startup()
    server := WS_Socket("TCP", "IPv4")
    WS_Bind(server, "0.0.0.0", "12345")
    WS_Listen(server)
    WS_HandleEvents(server, "ACCEPT READ CLOSE")
}

WS_OnRead(socket){
    WS_Recv(socket, ClientMessage)
    nick:=client.clientObj[socket]
    mb(client.clientObj[nick],ClientMessage,nick)

}

WS_Close(){
}

mb(x*){
    for a,b in x
        list.=b "`n"
    MsgBox,% list
}

tt(x*){
    for a,b in x
        list.=a "=" b "`n"
    ToolTip,% list
}

db(x*){
    for a,b in x
    list.=b "|"
    OutputDebug,%list%
}

class client {
    static clientObj := []

    __New(asock){
        this.sock:=asock
    }

    setNick(anick){
        this.nick:=anick
        client.keepSN(this.sock,this.nick)
        client.keepSN(this.nick,this.sock)
    }

    keepSN(x,y=""){
        clientObj:=client.clientObj
        clientObj[x] := y
    }


}  ;

ExitRoutine:
    WS_CloseSocket(server)  ;//
    WS_Shutdown()
ExitApp