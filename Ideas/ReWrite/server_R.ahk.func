;// Includes

;// Directives
	#singleinstance Force
	OnExit, ExitRoutine

;// Program start
    WS_LOGTOCONSOLE := 1
    initializeWS()  ;
return

WS_OnAccept(socket){
    WS_Accept(socket, client_ip, client_port)
    mb(socket,client_ip,client_port)
}

initializeWS(){
    WS_Startup()
    server := WS_Socket("TCP", "IPv4")
    WS_Bind(server, "0.0.0.0", "12345")
    WS_Listen(server)
    WS_HandleEvents(server, "ACCEPT READ CLOSE")
}

WS_OnRead(){

}

protNWCN(){
    client[socket] := new client(socket)
    client[socket].addNick(n := "Guest" . A_TickCount)
    client[socket].chanKeep("#Server")
    WS_Send(socket, "USRN||" . n . "짜")
    return
}

protMESG(){
    /*
        m = msgType
        d = Channel
        c = User Input (message)
	*/
    nickName := client[s].getNick()
    joker := client.chanKeep(["channelsTheNickIsIn"])
    ;// Outputdebug **Server>>OnSend>>MESG** s=%s%, m=%m%, c=%c%, d=%d%, nickName=%nickName%
    for sock in joker
    {
        for chan, nick in joker[sock]
        {
            ;// Outputdebug **Server>>OnSend>>MESG>>for sock in joker** %sock%, %chan%, %nick%
            if (d == chan)
                WS_Send(sock, "MESG||" . chan . "||" . nickName . "||" . c . "짜")
        }
    }
}

protCOMD(){
    RegexMatch(arg2, "^\/(\w+)? (.*)", arg)
    /* 
        arg1 = COMD
        arg2 = Parameter
    	mb(arg1, arg2, arg3, arg4, arg5)
    */
    cmd := arg1 == "nick" ? "NKCH" : arg1, prm := arg2
    if      (cmd = "JOIN")
    {
        ;// Outputdebug % "**Server>>WS_OnRead>>COMD>>JOIN** prm=" . prm
    }
    else if (cmd == "NKCH")
    {
        /*
            arg1 = socket
            arg2 = Full client message
            arg3 = #Channel
        	data := arg3
        	Outputdebug % "**Server>>WS_OnRead>>COMD>>NKCH** " . client[socket].nick
        */
    }
}

protJOIN(){
    /*
        p = #Channel
	*/
	client[socket].chanKeep(InStr(prm, "#") ? prm : prm := "#" . prm)

    ClientOrigin := client[s].nick
    penguin := client.chanKeep(["channelsTheNickIsIn"])
    for a in penguin
        for ch, nk in penguin[a]
            if (ch = p)
                listofnicks .= nk . " "
    penguin := client.chanKeep(["channelsTheNickIsIn"])
    for sock in penguin
    {
        for chan, nick in penguin[sock]
            if (chan = p)
                WS_Send(sock, z:="JOIN||" . p . "||" . ClientOrigin . "||" . listofnicks . "짜")
    }
}

protNKCH(){
    joker := client.chanKeep(["channelsTheNickIsIn"])[s]
    for chan, nick in joker
        joker[chan] := p
    /*
        m = COMD
        d = Full message
        c = NKCH
        p = New Nickname
	*/
    oldNick := client[s].getNick()
    client[s].addNick(p)
    ;// Outputdebug **Server>>OnSend>>MESG** s=%s%, m=%m%, d=%d%, c=%c%, d=%d%, nickName=%nickName%

    list := [], sendlist := []
    penguin := client.chanKeep(["chanlist"])
    for a in penguin
        if penguin[a].HasKey(oldNick),sock:=penguin[a,oldNick]
            penguin[a].Remove(oldNick),penguin[a,p] := sock,list[a] := 1
        ;// for b in penguin[a]
    for a,b in list
        for c,d in penguin[a]
            if (a == "#Server")
                continue
            else
                sendlist[c] := d
    for a,b in sendlist
        WS_Send(b, "NKCH||" . oldNick . "||" . p . "짜")
}

prot(NWCD){
    /*
        arg2/data = version number
        arg3/cmd  = code
    */
     client[socket].codeKeep(arg3,data)
}

protRQCD(){

}

sendMessage(){

}

WS_OnClose(socket){
    penguin := client.chanKeep(["channelsTheNickIsIn"])
    penguin[socket] := ""
    client[socket] := ""

    WS_Log(A_ThisFunc "(" socket ", message, " len ", " flags ")", 3)
    WS_Log("Socket:" socket " has disconnected`n----", 4)
}

getRegexArgs(s, byref a1,byref a2,byref a3 = "",byref a4 = "",byref a5 = ""){
    RegexReplace(s, "\|\|", "", cnt)
    loop, %cnt%
        search.="(.*)\|\|"
    search .= "(.*)"
    RegexMatch(s, "^" . search, a)
}

upperCase(s){
    StringUpper, s, s
    return s
}

mb(x*){
    for a,b in x
        list.=b "`n"
    MsgBox,% list
}

tt(x*){
    for a,b in x
        list.=a "=" b "`n"
    ToolTip,% list
}

db(x*){
    for a,b in x
    list.=b "|"
    OutputDebug,%list%
}

class client {
   __New(aSock){
      this.sock := aSock
   }



} ;//

ExitRoutine:
    WS_CloseSocket(server)  ;//
    WS_Shutdown()
ExitApp